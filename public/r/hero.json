{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hero",
  "type": "registry:block",
  "title": "Hero",
  "description": "A simple hero component.",
  "registryDependencies": [
    "button",
    "badge",
    "http://localhost:3000/r/producthunt-badge.json",
    "http://localhost:3000/r/icons.json",
    "http://localhost:3000/r/auth-dialog.json"
  ],
  "files": [
    {
      "path": "src/components/ui/hero.tsx",
      "content": "import { ReactNode } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ProductHuntBadge } from \"@/components/ui/producthunt-badge\";\nimport { Icons, Variant } from \"@/components/ui/icons\";\nimport { getChildrenByType } from \"@/lib/get-children-by-type\";\n\ninterface HeroAuthSectionProps {\n  children: ReactNode;\n}\n\nfunction HeroCtaSection({ children }: HeroAuthSectionProps) {\n  return children;\n}\n\nexport interface HeroProps {\n  badge: string;\n  title: string;\n  description: string;\n  children?: ReactNode;\n}\n\nexport function Hero({ badge, title, description, children }: HeroProps) {\n  const authSection = getChildrenByType<HeroAuthSectionProps>(children, HeroCtaSection);\n\n  return (\n    <section className=\"px-8 pt-24 md:pt-36 justify-center text-center flex flex-col mx-auto max-w-5xl items-center gap-5\">\n      <Badge variant=\"default\">{badge}</Badge>\n      <ProductHuntBadge />\n      <h1 className=\"text-4xl md:text-6xl font-semibold text-foreground\">{title}</h1>\n      <p className=\"text-lg text-muted-foreground max-w-3xl\">{description}</p>\n      {authSection?.props.children}\n      <Icons variant={Variant.ArrowDown4} color=\"var(--primary)\" className=\"w-36 h-36 mt-6\" />\n    </section>\n  );\n}\n\nHero.CtaSection = HeroCtaSection;\n",
      "type": "registry:block"
    },
    {
      "path": "src/lib/get-children-by-type.ts",
      "content": "import { ReactNode, ReactElement, isValidElement, Children } from \"react\";\n\nexport function getChildrenByType<T>(\n  children: ReactNode,\n  targetType: React.ComponentType<T>\n): ReactElement<T> | undefined {\n  const childrenArray = Children.toArray(children);\n\n  const matchingChild = childrenArray.find((child) => {\n    if (!isValidElement(child)) {\n      return false;\n    }\n\n    return child.type === targetType;\n  });\n\n  if (!matchingChild) {\n    return undefined;\n  }\n\n  return matchingChild as ReactElement<T>;\n}\n",
      "type": "registry:lib"
    }
  ]
}