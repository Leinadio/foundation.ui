{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "success-path",
  "type": "registry:block",
  "title": "Success Path",
  "description": "A simple success path component.",
  "registryDependencies": [
    "http://localhost:3000/r/timeline.json",
    "http://localhost:3000/r/headline.json"
  ],
  "files": [
    {
      "path": "src/components/ui/success-path.tsx",
      "content": "import { Timeline } from \"@/components/ui/timeline\";\nimport { Headline } from \"@/components/ui/headline\";\nimport { ReactNode } from \"react\";\nimport { CheckCircle, TrendingUp, Users, Zap } from \"lucide-react\";\n\ntype IconName = \"CheckCircle\" | \"Users\" | \"Zap\" | \"TrendingUp\";\n\nexport const iconMap: Record<IconName, React.ComponentType<{ className?: string }>> = {\n  CheckCircle,\n  Users,\n  Zap,\n  TrendingUp,\n};\n\ninterface TaskListProps {\n  paragraphs?: string[];\n  features?: SuccessPathFeature[];\n  summary?: SuccessPathSummary;\n}\n\nfunction TaskList({ paragraphs, features, summary }: TaskListProps) {\n  const featuresContent = (features ?? []).map((feature, idx) => {\n    const Icon = feature.icon ? iconMap[feature.icon] : undefined;\n    return (\n      <div\n        key={`f-${idx}`}\n        className=\"flex items-center gap-3 p-3 bg-green-50 dark:bg-green-900/20 border-green-200 border rounded-lg\"\n      >\n        {Icon ? <Icon className=\"w-5 h-5 text-green-600 flex-shrink-0\" /> : null}\n        <span className=\"text-base font-medium\">{feature.text}</span>\n      </div>\n    );\n  });\n\n  const SummaryIcon = summary?.icon ? iconMap[summary.icon] : undefined;\n\n  return (\n    <div>\n      {(paragraphs ?? []).length > 0 ? <p className=\"mb-8 text-sm md:text-lg\">{paragraphs?.[0]}</p> : null}\n      {featuresContent.length > 0 ? <div className=\"space-y-4\">{featuresContent}</div> : null}\n      {summary ? (\n        <div className=\"mt-6 p-4 bg-green-200 dark:bg-green-900 rounded-lg\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            {SummaryIcon ? <SummaryIcon className=\"w-4 h-4 text-green-600\" /> : null}\n            <span className=\"text-base font-semibold text-green-900 dark:text-green-200\">{summary.label}</span>\n          </div>\n          <p className=\"text-base text-green-800 dark:text-green-300\">{summary.text}</p>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\ninterface CardListProps {\n  paragraphs?: string[];\n  features?: SuccessPathFeature[];\n  summary?: SuccessPathSummary;\n}\n\nfunction CardList({ paragraphs, features, summary }: CardListProps) {\n  const featuresContent = (features ?? []).map((feature, idx) => {\n    const Icon = feature.icon ? iconMap[feature.icon] : undefined;\n    return (\n      <div key={`f-${idx}`} className=\"p-4 border border-green-200 dark:border-green-800 rounded-lg\">\n        {Icon ? <Icon className=\"w-5 h-5 text-green-600 flex-shrink-0\" /> : null}\n        <span className=\"text-base font-medium\">{feature.text}</span>\n      </div>\n    );\n  });\n\n  const SummaryIcon = summary?.icon ? iconMap[summary.icon] : undefined;\n\n  return (\n    <div>\n      {(paragraphs ?? []).length > 0 ? <p className=\"mb-8 text-sm md:text-lg\">{paragraphs?.[0]}</p> : null}\n      {featuresContent.length > 0 ? <div className=\"grid grid-cols-1 gap-4\">{featuresContent}</div> : null}\n      {summary ? (\n        <div className=\"mt-6 p-4 bg-green-200 dark:bg-green-900 rounded-lg\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            {SummaryIcon ? <SummaryIcon className=\"w-4 h-4 text-green-600\" /> : null}\n            <span className=\"text-base font-semibold text-green-900 dark:text-green-200\">{summary.label}</span>\n          </div>\n          <p className=\"text-base text-green-800 dark:text-green-300\">{summary.text}</p>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\ninterface BulletsListProps {\n  paragraphs?: string[];\n  bullets?: string[];\n  summary?: SuccessPathSummary;\n}\n\nfunction BulletsList({ paragraphs, bullets, summary }: BulletsListProps) {\n  const bulletsContent = (bullets ?? []).map((text, idx) => (\n    <div key={`b-${idx}`} className=\"flex items-center gap-2 text-base text-green-700 dark:text-green-300\">\n      ✅ {text}\n    </div>\n  ));\n\n  const SummaryIcon = summary?.icon ? iconMap[summary.icon] : undefined;\n\n  return (\n    <div>\n      {(paragraphs ?? []).length > 0 ? <p className=\"mb-8 text-sm md:text-lg\">{paragraphs?.[0]}</p> : null}\n      {bulletsContent.length > 0 ? <div className=\"space-y-3\">{bulletsContent}</div> : null}\n      {summary ? (\n        <div className=\"mt-6 p-4 bg-green-200 dark:bg-green-900 rounded-lg\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            {SummaryIcon ? <SummaryIcon className=\"w-4 h-4 text-green-600\" /> : null}\n            <span className=\"text-base font-semibold text-green-900 dark:text-green-200\">{summary.label}</span>\n          </div>\n          <p className=\"text-base text-green-800 dark:text-green-300\">{summary.text}</p>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\ninterface DefaultProps {\n  paragraphs?: string[];\n  features?: SuccessPathFeature[];\n  featuresLayout?: \"list\" | \"grid\";\n  bullets?: string[];\n  summary?: SuccessPathSummary;\n}\n\nfunction Default({ paragraphs, features, featuresLayout, bullets, summary }: DefaultProps) {\n  const featuresContent = (features ?? []).map((feature, idx) => {\n    const Icon = feature.icon ? iconMap[feature.icon] : undefined;\n    return (\n      <div\n        key={`f-${idx}`}\n        className={\n          featuresLayout === \"grid\"\n            ? \"p-4 border border-green-200 dark:border-green-800 rounded-lg\"\n            : \"flex items-center gap-3 p-3 bg-green-50 dark:bg-green-900/20 border-green-200 border rounded-lg\"\n        }\n      >\n        {Icon ? <Icon className=\"w-5 h-5 text-green-600 flex-shrink-0\" /> : null}\n        <span className=\"text-base font-medium\">{feature.text}</span>\n      </div>\n    );\n  });\n\n  const bulletsContent = (bullets ?? []).map((text, idx) => (\n    <div key={`b-${idx}`} className=\"flex items-center gap-2 text-base text-green-700 dark:text-green-300\">\n      ✅ {text}\n    </div>\n  ));\n\n  const SummaryIcon = summary?.icon ? iconMap[summary.icon] : undefined;\n\n  return (\n    <div>\n      {(paragraphs ?? []).length > 0 ? <p className=\"mb-8 text-sm md:text-lg\">{paragraphs?.[0]}</p> : null}\n      {features && features.length > 0 ? (\n        <div className={featuresLayout === \"grid\" ? \"grid grid-cols-1 gap-4\" : \"space-y-4\"}>{featuresContent}</div>\n      ) : null}\n      {bullets && bullets.length > 0 ? <div className=\"space-y-3\">{bulletsContent}</div> : null}\n      {summary ? (\n        <div className=\"mt-6 p-4 bg-green-200 dark:bg-green-900 rounded-lg\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            {SummaryIcon ? <SummaryIcon className=\"w-4 h-4 text-green-600\" /> : null}\n            <span className=\"text-base font-semibold text-green-900 dark:text-green-200\">{summary.label}</span>\n          </div>\n          <p className=\"text-base text-green-800 dark:text-green-300\">{summary.text}</p>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport interface SuccessPathFeature {\n  icon?: IconName;\n  text: string;\n}\n\nexport interface SuccessPathSummary {\n  icon?: IconName;\n  label: string;\n  text: string;\n}\n\nexport interface SuccessPathItem {\n  type: \"task-list\" | \"bullets-list\" | \"card-list\";\n  title: string;\n  paragraphs?: string[];\n  features?: SuccessPathFeature[];\n  featuresLayout?: \"list\" | \"grid\";\n  bullets?: string[];\n  summary?: SuccessPathSummary;\n}\n\nexport interface SuccessPathProps {\n  title?: ReactNode;\n  description?: string;\n  badge?: { text: string; isBadge: boolean };\n  color?: string;\n  fromColor?: string;\n  viaColor?: string;\n  data?: SuccessPathItem[];\n}\n\nconst defaultData: SuccessPathItem[] = [\n  {\n    type: \"task-list\",\n    title: \"Organisation claire\",\n    paragraphs: [\n      \"Avec une structure organisée, chaque tâche trouve sa place et chaque membre de l'équipe sait exactement quoi faire et quand.\",\n    ],\n    features: [\n      { icon: \"CheckCircle\", text: \"Tâches priorisées automatiquement\" },\n      { icon: \"CheckCircle\", text: \"Délais respectés à 95%\" },\n      { icon: \"CheckCircle\", text: \"Communication centralisée\" },\n    ],\n    featuresLayout: \"list\",\n    summary: {\n      icon: \"TrendingUp\",\n      label: \"Résultat\",\n      text: \"+65% de productivité en équipe dès la première semaine\",\n    },\n  },\n  {\n    type: \"card-list\",\n    title: \"Collaboration fluide\",\n    paragraphs: [\n      \"Fini les malentendus et les tâches dupliquées. L'équipe travaille en harmonie avec une visibilité complète sur l'avancement.\",\n    ],\n    features: [\n      { icon: \"Users\", text: \"Équipe synchronisée\" },\n      { icon: \"Zap\", text: \"Réactivité maximale\" },\n    ],\n    featuresLayout: \"grid\",\n    summary: {\n      icon: \"TrendingUp\",\n      label: \"Impact\",\n      text: \"Réduction de 80% des réunions inutiles et des emails de suivi\",\n    },\n  },\n  {\n    type: \"bullets-list\",\n    title: \"Croissance accélérée\",\n    paragraphs: [\n      \"Avec les bonnes fondations, votre startup peut enfin se concentrer sur ce qui compte : créer de la valeur et grandir.\",\n    ],\n    bullets: [\n      \"Focus retrouvé sur le produit\",\n      \"Équipe motivée et alignée\",\n      \"Livraisons dans les temps\",\n      \"Clients satisfaits et fidèles\",\n      \"Investisseurs confiants\",\n    ],\n    summary: {\n      icon: \"TrendingUp\",\n      label: \"Transformation\",\n      text: \"De 85% d'échecs à 90% de réussite : rejoignez les startups qui réussissent\",\n    },\n  },\n];\n\nexport function SuccessPath({\n  title = (\n    <>\n      <span className=\"text-green-600\">90%</span> {\"des startups qui s'organisent \"}\n      <span className=\"text-green-600\">atteignent leurs objectifs</span>\n    </>\n  ),\n  description = \"Découvrez comment transformer le chaos en machine à succès. Voici le chemin que suivent les fondateurs qui réussissent.\",\n  badge = { text: \"TRANSFORMATION RÉUSSIE\", isBadge: true },\n  color = \"green\",\n  fromColor = \"green-600\",\n  viaColor = \"emerald-500\",\n  data = defaultData,\n}: SuccessPathProps) {\n  const renderEntryContent = (entry: SuccessPathItem): ReactNode => {\n    switch (entry.type) {\n      case \"task-list\":\n        return <TaskList paragraphs={entry.paragraphs} features={entry.features} summary={entry.summary} />;\n      case \"card-list\":\n        return <CardList paragraphs={entry.paragraphs} features={entry.features} summary={entry.summary} />;\n      case \"bullets-list\":\n        return <BulletsList paragraphs={entry.paragraphs} bullets={entry.bullets} summary={entry.summary} />;\n      default:\n        return (\n          <Default\n            paragraphs={entry.paragraphs}\n            features={entry.features}\n            featuresLayout={entry.featuresLayout}\n            bullets={entry.bullets}\n            summary={entry.summary}\n          />\n        );\n    }\n  };\n\n  const timelineData = data.map((entry) => ({\n    title: entry.title,\n    content: renderEntryContent(entry),\n  }));\n\n  return (\n    <section className=\"flex flex-col gap-20 md:gap-24\">\n      <Headline title={title} description={description} badge={badge} color={color} />\n\n      <div className=\"relative w-full overflow-clip\">\n        <Timeline data={timelineData} fromColor={fromColor} viaColor={viaColor} />\n      </div>\n    </section>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}