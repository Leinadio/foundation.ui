{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "success-path",
  "type": "registry:block",
  "title": "Success Path",
  "description": "A simple success path component.",
  "files": [
    {
      "path": "src/blocks/landing-page/success-path/index.tsx",
      "content": "import { ReactNode } from \"react\";\nimport { Timeline, TimelineEntry } from \"@/components/ui/timeline\";\nimport { Headline } from \"@/components/shared/headline\";\n\ninterface TaskListProps {\n  paragraphs?: string[];\n  features?: SuccessPathFeature[];\n  summary?: SuccessPathSummary;\n}\n\nfunction TaskList({ paragraphs, features, summary }: TaskListProps): ReactNode {\n  const featuresContent: ReactNode[] = (features ?? []).map((feature: SuccessPathFeature, index: number): ReactNode => {\n    return (\n      <div key={`f-${index}`} className={`flex items-center gap-3 p-3 bg-primary/10 rounded-lg`}>\n        {feature.icon}\n        <span className=\"text-base font-medium\">{feature.text}</span>\n      </div>\n    );\n  });\n\n  return (\n    <div>\n      {(paragraphs ?? []).length > 0 ? <p className=\"mb-8 text-sm md:text-lg\">{paragraphs?.[0]}</p> : null}\n      {featuresContent.length > 0 ? <div className=\"space-y-4\">{featuresContent}</div> : null}\n      {summary ? (\n        <div className={`mt-6 p-4 bg-primary/80 rounded-lg`}>\n          <div className=\"flex items-center gap-2 mb-2\">\n            {summary?.icon}\n            <span className={`text-base font-semibold text-primary-foreground`}>{summary.label}</span>\n          </div>\n          <p className={`text-base text-primary-foreground/80`}>{summary.text}</p>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport interface SuccessPathFeature {\n  icon?: ReactNode;\n  text: string;\n}\n\nexport interface SuccessPathSummary {\n  icon?: ReactNode;\n  label: string;\n  text: string;\n}\n\nexport interface SuccessPathItem {\n  title: string;\n  paragraphs?: string[];\n  features?: SuccessPathFeature[];\n  summary?: SuccessPathSummary;\n}\n\nexport interface SuccessPathProps {\n  title?: ReactNode;\n  description?: string;\n  badgeText?: string;\n  data?: SuccessPathItem[];\n}\n\nexport function SuccessPath({\n  title = (\n    <>\n      <span className=\"text-primary\">90%</span> {\"des startups qui s'organisent \"}\n      <span className=\"text-primary\">atteignent leurs objectifs</span>\n    </>\n  ),\n  description = \"Découvrez comment transformer le chaos en machine à succès. Voici le chemin que suivent les fondateurs qui réussissent.\",\n  badgeText = \"TRANSFORMATION RÉUSSIE\",\n  data = [],\n}: SuccessPathProps) {\n  const timelineData: TimelineEntry[] = data.map(\n    (entry: SuccessPathItem): TimelineEntry => ({\n      title: entry.title,\n      content: <TaskList paragraphs={entry.paragraphs} features={entry.features} summary={entry.summary} />,\n    })\n  );\n\n  return (\n    <section className=\"flex flex-col gap-20 md:gap-24\">\n      <Headline title={title} description={description} badge={{ text: badgeText, isBadge: false }} />\n\n      <div className=\"relative w-full overflow-clip\">\n        <Timeline data={timelineData} />\n      </div>\n    </section>\n  );\n}\n",
      "type": "registry:block",
      "target": "src/blocks/landing-page/success-path/ui.tsx"
    },
    {
      "path": "src/components/ui/timeline.tsx",
      "content": "\"use client\";\nimport { useScroll, useTransform, motion } from \"motion/react\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nexport interface TimelineEntry {\n  title: string;\n  content: React.ReactNode;\n}\n\ninterface TimelineProps {\n  data: TimelineEntry[];\n}\n\nexport const Timeline = ({ data }: TimelineProps) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [height, setHeight] = useState(0);\n\n  useEffect(() => {\n    if (ref.current) {\n      const rect = ref.current.getBoundingClientRect();\n      setHeight(rect.height);\n    }\n  }, [ref]);\n\n  const { scrollYProgress } = useScroll({\n    target: containerRef,\n    offset: [\"start 10%\", \"end 50%\"],\n  });\n\n  const heightTransform = useTransform(scrollYProgress, [0, 1], [0, height]);\n  const opacityTransform = useTransform(scrollYProgress, [0, 0.1], [0, 1]);\n\n  return (\n    <div className=\"w-full font-sans md:px-10\" ref={containerRef}>\n      <div ref={ref} className=\"relative max-w-7xl mx-auto pb-20\">\n        {data.map((item, index) => (\n          <div\n            key={index}\n            className={`flex justify-start ${index === 0 ? \"pt-0\" : \"pt-10\"} ${\n              index === 0 ? \"md:pt-0\" : \"md:pt-40\"\n            } md:gap-10 `}\n          >\n            <div className=\"sticky flex flex-col md:flex-row z-40 items-center top-40 self-start max-w-xs lg:max-w-sm md:w-full\">\n              <div className=\"h-10 absolute left-3 md:left-3 w-10 rounded-full bg-white dark:bg-black flex items-center justify-center\">\n                <div className=\"h-4 w-4 rounded-full bg-neutral-200 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-700 p-2\" />\n              </div>\n              <h3 className=\"hidden md:block text-xl md:pl-20 md:text-5xl font-bold text-neutral-500 dark:text-neutral-200 \">\n                {item.title}\n              </h3>\n            </div>\n\n            <div className=\"relative pl-20 pr-4 md:pl-4 w-full\">\n              <h3 className=\"md:hidden block text-2xl mb-4 text-left font-bold text-neutral-500 dark:text-neutral-500\">\n                {item.title}\n              </h3>\n              {item.content}\n            </div>\n          </div>\n        ))}\n        <div\n          style={{\n            height: height + \"px\",\n          }}\n          className=\"absolute md:left-8 left-8 top-0 overflow-hidden w-[2px] bg-[linear-gradient(to_bottom,var(--tw-gradient-stops))] from-transparent from-[0%] via-neutral-200 dark:via-neutral-700 to-transparent to-[99%]  [mask-image:linear-gradient(to_bottom,transparent_0%,black_10%,black_90%,transparent_100%)] \"\n        >\n          <motion.div\n            style={{\n              height: heightTransform,\n              opacity: opacityTransform,\n            }}\n            className={`absolute inset-x-0 top-0 w-[2px] bg-gradient-to-t from-primary via-primary/80 to-transparent from-[0%] via-[10%] rounded-full`}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/shared/headline/index.tsx",
      "content": "import { Badge } from \"@/components/ui/badge\";\nimport { ReactNode } from \"react\";\n\ninterface HeadlineProps {\n  title: ReactNode;\n  description: string;\n  badge: {\n    text: string;\n    isBadge: boolean;\n  };\n}\n\nexport function Headline({ title, description, badge }: HeadlineProps) {\n  const displayBadge = () => {\n    if (badge.isBadge) {\n      return (\n        <Badge variant=\"outline\" className={`text-primary border-primary`}>\n          {badge.text}\n        </Badge>\n      );\n    }\n    return <p className={`text-sm lg:text-lg text-primary font-semibold uppercase`}>{badge.text}</p>;\n  };\n  return (\n    <div className=\"flex flex-col items-center gap-4 text-center mb-0 max-w-5xl mx-auto\">\n      {displayBadge()}\n      <h2 className=\"text-4xl md:text-6xl font-semibold text-foreground leading-tight\">{title}</h2>\n      <p className=\"text-xl md:text-2xl text-muted-foreground max-w-4xl\">{description}</p>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}